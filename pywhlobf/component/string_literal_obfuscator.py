from pathlib import Path
import shutil
import re

import attrs


@attrs.define
class StringLiteralObfuscatorConfig:
    enable: bool = True


class StringLiteralObfuscator:

    def __init__(self, config: StringLiteralObfuscatorConfig):
        self.config = config

    @classmethod
    def inject_header(cls, code: str):
        header = '''
/* >>> Generated by pywhlobf StringLiteralObfuscator. */
#include "obfuscate.h"

#define AY_OBFUSCATE_HACK_LENGTH(data) \\
    []() -> long { \\
        constexpr auto n = sizeof(data)/sizeof(data[0]); \\
        return n; \\
    }()
/* <<< Generated by pywhlobf StringLiteralObfuscator. */

'''
        return header.lstrip() + code

    @classmethod
    def drop_const(cls, with_const: bool, pattern: str):
        if not with_const:
            pattern = pattern.replace('const ', '')
        return pattern

    @classmethod
    def obfuscate_static_char_literal(cls, with_const: bool, code: str):
        pattern = cls.drop_const(with_const, r'^static const char (\w+)\[\] = \"(.*?)\";$')

        var_names = []
        for var_name, _ in re.findall(pattern, code, flags=re.MULTILINE):
            var_names.append(var_name)

        code = re.sub(
            pattern,
            '\n'.join([
                f'/* Changed by pywhlobf StringLiteralObfuscator (with_const={with_const}). */',
                cls.drop_const(with_const, r'static const char *\1 = AY_OBFUSCATE("\2");'),
                r'static const long __length\1 = AY_OBFUSCATE_HACK_LENGTH("\2");',
            ]),
            code,
            flags=re.MULTILINE,
        )

        for var_name in var_names:
            code = re.sub(
                r'sizeof\(' + var_name + r'\)',
                (
                    f'__length{var_name} '
                    f'/* Changed by pywhlobf StringLiteralObfuscator (with_const={with_const}). */'
                ),
                code,
            )

        return code

    def run(self, cpp_file: Path):
        if not self.config.enable:
            return False, None

        # Backup for debugging.
        shutil.copyfile(cpp_file, cpp_file.with_suffix('.cpp.bak_before_string_literal_obfuscator'))

        # Change cpp file inplace.
        code = cpp_file.read_text()
        code = self.obfuscate_static_char_literal(with_const=True, code=code)
        code = self.obfuscate_static_char_literal(with_const=False, code=code)
        code = self.inject_header(code)
        cpp_file.write_text(code)

        # Get include folder.
        include_fd = Path(__file__).parent / 'string_literal_obfuscator_asset'
        assert (include_fd / 'obfuscate.h').is_file()

        return True, include_fd
