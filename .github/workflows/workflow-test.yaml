name: (Workflow) Test
on:
  workflow_call:
jobs:
  test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        image:
          - "quay.io/pypa/manylinux_2_24_x86_64"
        python_abi:
          - "cp38-cp38"
          - "cp39-cp39"
          - "cp310-cp310"
          - "cp311-cp311"
        test_legacy_deps:
          - "yes"
          - "no"
        exclude:
          # Takes too much time to build from source.
          - python_abi: "cp310-cp310"
            test_legacy_deps: "yes"
          - python_abi: "cp311-cp311"
            test_legacy_deps: "yes"
    container:
      image: ${{ matrix.image }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup python/pip.
        run: |
          update-alternatives --install /usr/bin/python python /opt/python/${{ matrix.python_abi }}/bin/python 0
          python --version
          update-alternatives --install /usr/bin/pip pip /opt/python/${{ matrix.python_abi }}/bin/pip 0
          pip install -U pip
          pip --version
      - name: Set to the legacy dependencies.
        run: |
          PYTHON_SCRIPT=$(
          cat << 'EOF'

          import sys
          import os.path

          assert len(sys.argv) == 2
          _, setup_cfg = sys.argv

          with open(setup_cfg) as fin:
              text = fin.read()

          begin = text.find('install_requires')
          end = text.find('extras_require')
          text_deps = text[begin:end]

          lines = text_deps.splitlines()
          new_lines = []
          for line in lines:
              new_line = line.replace('>=', '==', 1)
              new_lines.append(new_line)
          new_text_deps = '\n'.join(new_lines)

          new_text = text[:begin] + new_text_deps + text[end:]

          with open(setup_cfg, 'w') as fout:
              fout.write(new_text)

          EOF
          )

          python -c "$PYTHON_SCRIPT" "setup.cfg"
          cat setup.cfg
        if: matrix.test_legacy_deps == 'yes'
      - name: Install.
        run: |
          # Install with the latest dependencies.
          pip install -e .

          # yapf & flake8.
          pip install yapf flake8
          update-alternatives --install /usr/bin/yapf yapf /opt/python/${{ matrix.python_abi }}/bin/yapf 0
          update-alternatives --install /usr/bin/flake8 flake8 /opt/python/${{ matrix.python_abi }}/bin/flake8 0

          # pytest.
          pip install 'pytest<7.2.0' pytest-parallel pytest-env
          update-alternatives --install /usr/bin/pytest pytest /opt/python/${{ matrix.python_abi }}/bin/pytest 0
      - name: Lint (pywhlobf)
        run: |
          yapf -d -r pywhlobf && flake8 pywhlobf
        if: matrix.test_legacy_deps == 'no' && matrix.python_abi == 'cp38-cp38'
      - name: Prepare test data.
        run: |
          export PYWHLOBF_DATA=$(pwd)/tmp-pywhlobf-data
          echo "PYWHLOBF_DATA=${PYWHLOBF_DATA}" >> $GITHUB_ENV

          # Download & unzip wheel 0.37.1
          mkdir -p "${PYWHLOBF_DATA}/test-data/wheel-0.37.1/"
          wget \
            https://files.pythonhosted.org/packages/27/d6/003e593296a85fd6ed616ed962795b2f87709c3eee2bca4f6d0fe55c6d00/wheel-0.37.1-py2.py3-none-any.whl \
            -O "${PYWHLOBF_DATA}/test-data/wheel-0.37.1/wheel-0.37.1-py2.py3-none-any.whl"
          unzip \
            "${PYWHLOBF_DATA}/test-data/wheel-0.37.1/wheel-0.37.1-py2.py3-none-any.whl" \
            -d "${PYWHLOBF_DATA}/test-data/wheel-0.37.1/"

          # Download & unzip wheel 0.38.4
          mkdir -p "${PYWHLOBF_DATA}/test-data/wheel-0.38.4/"
          wget \
            https://files.pythonhosted.org/packages/bd/7c/d38a0b30ce22fc26ed7dbc087c6d00851fb3395e9d0dac40bec1f905030c/wheel-0.38.4-py3-none-any.whl \
            -O "${PYWHLOBF_DATA}/test-data/wheel-0.38.4/wheel-0.38.4-py3-none-any.whl"
          unzip \
            "${PYWHLOBF_DATA}/test-data/wheel-0.38.4/wheel-0.38.4-py3-none-any.whl" \
            -d "${PYWHLOBF_DATA}/test-data/wheel-0.38.4/"
      - name: Test
        run: |
          # Test.
          pytest
